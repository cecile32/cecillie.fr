<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    {%~ include 'partials/metatags.html.twig' ~%}
    <link href="/style.css" rel="stylesheet">
    <style>
      p {
        margin-bottom: 1rem;
      }
      p > a:hover {
        text-decoration: revert;
      }
      .noise {
        z-index: 100;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        opacity: .05;
      }
    </style>
  </head>
  <body class="font-sans leading-normal tracking-normal m-10">
    <canvas id="noise" class="noise"></canvas>
    <nav class="p-2 mt-0 w-full">
      <div class="container mx-auto flex flex-wrap items-center">
        <div class="flex w-full md:w-1/2 justify-center md:justify-start font-extrabold">
          <a class="no-underline hover:no-underline" href="{{ url() }}">
            <img src="{{ url('/img/logo.svg') }}" class="w-8" />
          </a>
          <a class="no-underline hover:no-underline mt-2 ml-10" href="mailto:{{ site.author.email }}">
            <span class="text-sm font-thin pl-2">{{ site.author.email }}</span>
          </a>
        </div>
        <div class="flex w-full md:pt-2 pt-6 content-center justify-between md:w-1/2 md:justify-end">
          <ul class="list-reset flex justify-between flex-1 items-center">
          {%- for link in site.links ~%}
            <li>
              <a class="text-sm inline-block no-underline hover:text-underline font-thin lowercase" href="{{ link.url }}" target="_blank" rel="noopener">{{ link.name }}</a>
            </li>
          {%- endfor ~%}
          </ul>
        </div>
      </div>
    </nav>
    <div class="md:my-24 md:mx-24">
      {%- block content ~%}
      <div class="leading-normal mb-4 my-4">
        {{- page.content ~}}
      </div>
      {%- endblock content ~%}
    </div>
    <script>
      // source: https://codepen.io/IbeVanmeenen/pen/vZzgvg
      const noise = () => {
        let canvas, ctx;
        let wWidth, wHeight;
        let noiseData = [];
        let frame = 0;
        let loopTimeout;
        // Create Noise
        const createNoise = () => {
          const idata = ctx.createImageData(wWidth, wHeight);
          const buffer32 = new Uint32Array(idata.data.buffer);
          const len = buffer32.length;
          for (let i = 0; i < len; i++) {
            if (Math.random() < 0.5) {
              buffer32[i] = 0xff000000;
            }
          }
          noiseData.push(idata);
        };
        // Play Noise
        const paintNoise = () => {
          if (frame === 9) {
            frame = 0;
          } else {
            frame++;
          }
          ctx.putImageData(noiseData[frame], 0, 0);
        };
        // Loop
        const loop = () => {
          paintNoise(frame);
          loopTimeout = window.setTimeout(() => {
            window.requestAnimationFrame(loop);
          }, (1000 / 25));
        };
        // Setup
        const setup = () => {
          wWidth = window.innerWidth;
          wHeight = window.innerHeight;
          canvas.width = wWidth;
          canvas.height = wHeight;
          for (let i = 0; i < 10; i++) {
              createNoise();
          }
          loop();
        };
        // Reset
        let resizeThrottle;
        const reset = () => {
          window.addEventListener('resize', () => {
            window.clearTimeout(resizeThrottle);
            resizeThrottle = window.setTimeout(() => {
              window.clearTimeout(loopTimeout);
              setup();
            }, 200);
          }, false);
        };
        // Init
        const init = (() => {
          canvas = document.getElementById('noise');
          ctx = canvas.getContext('2d');
          setup();
        })();
      };

      noise();
    </script>
  </body>
</html>
